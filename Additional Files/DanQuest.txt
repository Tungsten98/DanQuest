Game objective:
The player collects as many points as possible by clicking on constantly moving balls of
a certain colour group (warm/cool, depending on the player's choice). Clicking on balls of
the opposite colour will result in the game being over. 

Game mechanics:
Window behaviour: the window cannot be resized.

Before play:
The player chooses to play in warm mode or cool mode, with the player's best score shown 
at the bottom (for warm and cool modes respectively).
If the player chooses warm mode, the player will click on warm colours to gain points, and
loses if s/he clicks a cool colour, and vise versa for cool mode.

During play:
Depending on the game mode, the player must click on colours of the correct type to earn
points.

The coloured balls move at a constant speed, with each colour that leans closer to the
extreme (red for warm, blue for cool) moving faster than colours closer to yellow (the 
neutral colour), thus earning more points.

Clicking a ball of the opposite colour will result in the game ending, invoking a delay 
for 3 seconds to have the player realise the game is lost, and then switching to an 
interface similar to the main menu (but with play again options instead).

The balls will spawn at random points of the map, and travel at a random angle (except for
straight lines). The balls will bounce off walls and be destroyed once the player clicks
it (or their lifespan reaches its limit).

Spawning Algorithm to follow:
	1st spawn: 1 ball worth 1 point
	2nd spawn: 2 balls worth 1 point each
	3rd spawn: 1 ball of the opposite colour
	4th spawn: 5 balls (1 opposite, 4 worth 1 point)
	5th spawn: 5 balls (2 opposite, 2 worth 1 point, 1 worth 2 points)
	6th spawn: 8 balls (6 worth random (1 to 3), 2 opposite)
	7th spawn: 10 balls (7 worth random (1 to 3), 3 opposite)
	8th spawn: 15 balls (11 worth random (1 to 5), 4 opposite)
	9th spawn and up: 20 balls (each are random))

The balls will spawn at a faster rate until the fastest rate has been reached, and will
continue to spawn until the maximum number of balls are on the screen.

When the balls collide with other balls or the walls, they bounce off to the negative 
angle equivalents.

Resources needed:
Graphics:
1 white ball sprite (smoothed)
1 white, decorated background sprite (wood)
1 white wall block (square, size divisible by both window width and height variables)
1 music track (relaxed, lyric-less)

Files:
1 .dat binary file containing best scores

Game engine files:
Game state manager (with start and playing states)
Texture manager (responsible for loading and sorting textures)
Music manager (responsible for loading music)

Game objects/classes:
Class Ball
	Struct Warm/Cool
		Enumeration Class holding each colour
Class BallSpawner
Class Wall

Class implementations:

Class BallSpawner //is in charge of controlling the balls' spawning
{
	Variables:
	const int maximumNum, initialized to 20
	std::list of pointers to Ball objects
	int score
	int pass (to check for the number of times spawned)
	sf::Text object to render score to screen
	sf::Clock spawnClock
	const float lifeSpan (time in seconds representing the lifespan of each ball)
	const float spawnRate (time in seconds representing the time gap for each ball
	(re)spawn)
	
	enum class GameMode //placed in BallSpawner file but outside the class
	{
		WARM,
		COOL
	}
	
	GameMode object (gameMode)
	
	Nested Struct Colours
	{
		enum class Warm
		{
			ORANGE-YELLOW,
			ORANGE,
			VERMILLION-ORANGE,
			VERMILLION,
			VERMILLION-RED,
			RED
		}
		enum class Cool
		{
			LIME,
			GREEN,
			TEAL,
			CYAN,
			TURQUOISE,
			BLUE
		}
	}
	
	Methods:
	Constructor(choice)
	{
		IF the choice is a warm colour, THEN
		{
			Adjust gameMode to WARM
		}
		ELSE
		{
			Adjust gameMode to COOL
		}
		
		(Re)start the clock
		Initialise the pass number to 1
	}
	
	void draw method(sf::RenderWindow window) //draws all existing balls onto the screen
	
	void SpawnBall method
	{
		IF the gameMode is WARM, THEN (Follow the same formula for COOL)
		{
				
			SWITCH pass
			{
				CASE 1:
					Spawn a ball worth 1 point (ORANGE-YELLOW)
					Reset the spawnClock
				CASE 2:
					WHILE the number of balls spawned is less than 2
					DO
					{
						Spawn a ball worth 1 point
						Reset the spawnClock
					}
				CASE 3:
					Spawn a ball of the opposite colour (any COOL colour)
					Reset the spawnClock
				CASE 4:
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 5
					DO
					{
						IF the number of WARM balls spawned is 4, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls spawned is 1
							Spawn a WARM ball worth 1 point (ORANGE-YELLOW)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth 1 point
								
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
				CASE 5: //2 opposite, 2 1 point, 1 2 points
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 5
					DO
					{
						IF the number of WARM balls is 3, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls is 2
							Spawn a WARM ball worth (66% 1 point, 33% 2 points)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth (66% 1 point, 33% 2 points)
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
				CASE 6: //2 opposite, 6 random (1-3) points
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 8
					DO
					{
						IF the number of WARM balls is 6, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls is 2
							Spawn a WARM ball worth (40% for 1 & 2 points, 20% for 3 points)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth (40% for 1 & 2 points, 20% for 3 points)
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
				CASE 7: //3 opposite, 7 random (1-3) points
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 10
					DO
					{
						IF the number of WARM balls is 7, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls is 3
							Spawn a WARM ball worth (40% for 1 & 2 points, 20% for 3 points)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth (40% for 1 & 2 points, 20% for 3 points)
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
				CASE 8: //3 opposite, 11 random (1-5) points
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 15
					DO
					{
						IF the number of WARM balls is 11, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls is 4
							Spawn a WARM ball worth (20% each)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth (20% each)
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
				DEFAULT: //20 random
					Instantiate 2 integers to keep track of the individual ball counts
					WHILE the number of balls is less than 8
					DO
					{
						IF the number of WARM balls is 14, THEN
							Spawn a COOL ball
						ELSE IF the number of COOL balls is 6
							Spawn a WARM ball worth (10% for 6 points, 18% for the rest)
						ELSE
							In a 50% chance
								Spawn a WARM ball worth (10% for 6 points, 18% for the rest)
							Otherwise
								Spawn a COOL ball
						
						Reset the spawnClock
					}
			}
			
			Increment the pass if it is less than 9
		}
	}
	
	void update method()
	{
		FOR every ball in the ballArray
		{
			IF the user clicks on that ball, THEN
			{
				IF the ball awards points, THEN
				{
					Increment the player's score by the amount of points
					Delete the Ball object and remove the allocated memory from the list
				}
				ELSE
				{
					Notify the game object that the player has lost
				}
			}
		}
		
		Invoke ball spawn method
		Move the remaining balls
	}
}

Class Ball
{
	Note: All the balls need to know in the game is the amount of points allocated to 
			them, and whether or not the they are clicked upon
			
	Variables:
		Public: Integer to hold the score (pointsToGive)
		Public: Sprite representation of the ball
		object in constructor (sprite)
		Private: Static constant Pi value = 3.14159
		Public: CircleShape type for boundaries (ballArea)
		Private: Float speed
	
	Methods:
		
		Constructor(points, colour, speed):
		{
			Allocate the number of points to this object's points value
			Set the sprite's texture to match the ball texture
			Set the sprite's colour to match the colour parameter
			Generate a random position to spawn the ball
				IF the position is out of bounds (not within the wall perimeter), THEN
				keep generating a random position
			Set the sprite's position to the generated spawn position
			Initialise an angle for the ball to travel to at random
				IF the random angle is too horizontal/vertical, THEN keep generating a 
				random angle
		}
		
		//to be used every time the game updates, the BallSpawner will handle the game 
		logic based on these values
		boolean clicked(mouse position, or mousePos)
		{
			IF mousePos is within the ballArea THEN
			{
				return true
				
			} ENDIF
			
			return false
		}
		
		void move(float dt)
		{
			Move the sprite according to the ballAngle and set its speed to the constant
			speed multiplied by the rate (dt)
			IF the ball hits a wall object, THEN
				Depending on where the ball hits the wall, change the angle accordingly
					If the contact is vertical, change the ball angle to its negative 
					value
					Else if the contact is horizontal, change the ball angle to 180 - 
					itself
			ELSE IF the ball hits another ball
				Depending on which side the balls contact (up/down or left/right)
					If the contact is vertical, change the ball angle to its negative 
					value
					Else if the contact is horizontal, change the ball angle to 180 - 
					itself			
		}
}

Algorithms:

void GameOverPage::updateNameString(const int& unicodeKey)
{
	Instantiate a char variable named character based on unicodeKey (if key is less than
	128)

	IF character is a valid alphabet, THEN
	{
		Ignore case by switching the input to upper case
	}
	ELSE RETURN

	Access the currentInput variable's data
	
	Iterate over the number of '-' characters in the string
	
	IF there are less than 3 non '-' characters in the string 
	AND unicodeKey is less than 128
	THEN {
		Iterate over the string's characters and find the first instance of '-'
		Replace that character with character
	}
	
	ELSE IF there are less than 3 '-' characters in the string
	AND unicodeKey equates to the backspace key
	THEN {
		Iterate over the string to find the first non '-' character
		Replace that character with '-'
	}
	
	Update currentText's string to show currentInput
}